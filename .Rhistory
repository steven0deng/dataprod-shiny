summary(fit)
yhat <- predict(lm(y~xMat-1))
plot(x,y,frame=FALSE,pch=21,bg='lightblue',cex=2)
lines(x,yhat,col='red',lwd=2)
mu_stock <- apply(rtn_df[, -1], 2, mean, na.rm = TRUE)
COV_stock <- cov(rtn_df[, -1], use = "na.or.complete")
# match mu_stock to COV_stock:
mu_stock <- sapply(
colnames(COV_stock),
function(e){
indtmp <- which(names(mu_stock) == e)
ifelse(length(indtmp) != 1, 0, mu_stock[indtmp])
})
list(
mu_stock = mu_stock,
COV_stock = COV_stock
)
}
#
optimWeight <- function(mu_stock, COV_stock, beta_df){
nstock <- nrow(COV_stock)
# set up range: l <= w <= u
lowerlimit <- round(min(0.005, 0.25/nstock), 4)
upperlimit <- round(0.1, 4)
l <- matrix(rep(lowerlimit, nstock))
u <- matrix(rep(upperlimit, nstock))
# set up utility function: \min(c'*x + 1/2 * x' * H * x)
if(is.null(mu_stock)){
mu <- rep(0, nstock)
} else{
lam <- 0.0005
c <- -mu_stock * lam
}
H <- COV_stock
# set up constraints: b <= A * w <= b + r
ones <- rep(1, nstock)
betas <- sapply(as.numeric(names(mu_stock)), function(e){ # e = 1
ind <- which(beta_df$SECUCODE == e)
if(length(ind) == 1){
tmp <- beta_df[ind, "BETA"]
} else{
tmp <- 1
}
tmp
})
A <- rbind(ones, betas)
b <- c(1, 1) # 权重，beta
r <- c(1e-5, 1e-5)
# run optimization:
sv <- kernlab::ipop(c, H, A, b, l, u, r, margin = 0.001, maxiter = 1000)
w <- kernlab::primal(sv)
data.frame(
WEIGHT = w,
BETA = betas
)
}
### 函数定义结束
startDate <- 20160101
endDate <- 20170101
### 获取中证500成份股数据：
indexComp <- GetData_IndexComponent("399905")
### 获取股票行情数据：
stockData <- GetData_StockData(startDate, endDate)
### 确定交易日：
tradingDates <- GetData_TradingDate()
tradingDates <- tradingDates[tradingDates >= startDate & tradingDates <= endDate]
dates <- tradingDates[seq(1, length(tradingDates), by = 20)]
estimateStockData <- function(secucodes, stockData){
rtn_df <- NULL
for(i_r in 1:length(secucodes)){ # i_r = 1
code <- secucodes[i_r]
tmp <- stockData[
stockData$TRADINGDATE <= date & stockData$SECUCODE == code,
c("TRADINGDATE", "AdjClose")
]
rtn <- data.frame(
TRADINGDATE = tmp[-1, "TRADINGDATE"],
RETURN = diff(tmp$AdjClose) / tmp$AdjClose[-nrow(tmp)]
)
colnames(rtn)[2] <- code
# Append new
if(is.null(rtn_df)){
rtn_df <- rtn
} else{
rtn_df <- merge(
rtn_df, rtn, by = "TRADINGDATE", all = TRUE
)
}
}
mu_stock <- apply(rtn_df[, -1], 2, mean, na.rm = TRUE)
COV_stock <- cov(rtn_df[, -1], use = "na.or.complete")
# match mu_stock to COV_stock:
mu_stock <- sapply(
colnames(COV_stock),
function(e){
indtmp <- which(names(mu_stock) == e)
ifelse(length(indtmp) != 1, 0, mu_stock[indtmp])
})
list(
mu_stock = mu_stock,
COV_stock = COV_stock
)
}
GetData_StockData <- function(startDate, endDate){
df <- GetData_General("QUOTATION", "ALLMKT", "STOCK", "DAY", startDate, endDate)
colnames(df)[which(colnames(df) == "F_DATE")] <- "TRADINGDATE"
colnames(df)[which(colnames(df) == "F_CODE")] <- "SECUCODE"
colnames(df)[which(colnames(df) == "F_STATUS")] <- "STATUS"
colnames(df)[which(colnames(df) == "F_0001")] <- "PreCLose"
colnames(df)[which(colnames(df) == "F_0002")] <- "Open"
colnames(df)[which(colnames(df) == "F_0003")] <- "High"
colnames(df)[which(colnames(df) == "F_0004")] <- "Low"
colnames(df)[which(colnames(df) == "F_0005")] <- "Close"
colnames(df)[which(colnames(df) == "F_0006")] <- "TurnoverVolume"
colnames(df)[which(colnames(df) == "F_0007")] <- "TurnoverValue"
colnames(df)[which(colnames(df) == "F_0009")] <- "AdjClose"
df <- df[ , -16]
df <- df[order(df$TRADINGDATE), ]
for(iter in 1:15){
df[ , iter] <- as.numeric(df[ , iter])
}
return(df)
}
GetData_TradingDate <- function(){
longURL <- "https://dcapi.quanttech.cn:50005/V3/quandis/?BUSINESSTYPE=INSTRUMENT&TABLETYPE=DEFAULT&DATATYPE=TRADINGDATE"
#print(longURL)
dataMatrix <- GetData_OpenURL(longURL)
df <- as.data.frame(dataMatrix, stringsAsFactors = FALSE)
colnames(df) <- df[1, ]
df <- df[-1, ]
df <- df[order(df$F_DATE), ]
dates <- sort(as.numeric(df[df$F_0004 == 1, "F_DATE"]))
dates
}
GetData_IndexComponent <- function(indexcode){ # indexcode = "399905"
longURL <- "https://dcapi.quanttech.cn:50005/V3/quandis/?BUSINESSTYPE=INSTRUMENT&TABLETYPE=INDEXCOMPONENT&DATATYPE=STOCKPOOL"
longURL <- paste0("https://dcapi.quanttech.cn:50005/V3/quandis/?BUSINESSTYPE=INSTRUMENT&TABLETYPE=INDEXCOMPONENT&DATATYPE=STOCKPOOL&SECUCODE=",
indexcode)
#print(longURL)
dataMatrix <- GetData_OpenURL(longURL)
df <- as.data.frame(dataMatrix, stringsAsFactors = FALSE)
colnames(df) <- df[1, ]
df <- df[-1, ]
colnames(df)[which(colnames(df) == "F_CODE")] <- "INDEXCODE"
colnames(df)[which(colnames(df) == "F_0001")] <- "SECUCODE"
colnames(df)[which(colnames(df) == "F_0003")] <- "INDATE"
colnames(df)[which(colnames(df) == "F_0004")] <- "OUTDATE"
for(iter in 1:4){
df[ , iter] <- as.numeric(df[ , iter])
}
df
}
adjustWeight_bisec <- function(w, beta, b_tar = 1){
b_avg <- sum(w * beta)
N_g <- sum(beta > b_tar)
N_l <- sum(beta < b_tar)
sum_g <- sum(beta[beta > b_tar])
sum_l <- sum(beta[beta < b_tar])
c <- (b_tar - b_avg) / (N_l * sum_g - N_g * sum_l)
dw_g <- N_l * c
dw_l <- -N_g * c
w_new <- w
w_new[beta > b_tar] <- w_new[beta > b_tar] + dw_g
w_new[beta < b_tar] <- w_new[beta < b_tar] + dw_l
w_new
}
GetData_Beta <- function(date){ # date = 20170201
if(as.numeric(substr(date, 5, 6)) == 1){
startDate <- date - 10000 + 1100 - as.numeric(substr(date, 7, 8)) + 1
} else{
startDate <- date - 100 - as.numeric(substr(date, 7, 8)) + 1
}
endDate <- date - as.numeric(substr(date, 7, 8)) + 1
df <- GetData_General_Table("FACTOR", "ALLMKT", "ALPHA", "beta_mktcap_month", "DAY", startDate, endDate)
for(iter in 1:3){
df[ , iter] <- as.numeric(df[ , iter])
}
df <- df[order(df$F_DATE), 1:3]
colnames(df)[3] <- "F_BETA"
return(df)
}
GetData_General_Table <- function(businessType, secuCode, secuType,
tableName, timeFrame, startDate, endDate){
longURL <- paste0("https://dcapi.quanttech.cn:50005/v3/quandis/?BUSINESSTYPE=", businessType,
"&SECUCODE=", secuCode,
"&SECUTYPE=", secuType,
"&TABLENAME=", tableName,
"&TIMEFRAME=", timeFrame,
"&STARTTIME=", startDate,
"&ENDTIME=", endDate)
#print(longURL)
dataMatrix <- GetData_OpenURL(longURL)
df <- as.data.frame(dataMatrix, stringsAsFactors = FALSE)
colnames(df) <- df[1, ]
df <- df[-1, ]
df
}
GetData_General <- function(businessType, secuCode, secuType, timeFrame, startDate, endDate){
longURL <- paste0("https://dcapi.quanttech.cn:50005/v3/quandis/?BUSINESSTYPE=", businessType,
"&SECUCODE=", secuCode,
"&SECUTYPE=", secuType,
"&TIMEFRAME=", timeFrame,
"&STARTTIME=", startDate,
"&ENDTIME=", endDate)
#print(longURL)
dataMatrix <- GetData_OpenURL(longURL)
df <- as.data.frame(dataMatrix, stringsAsFactors = FALSE)
colnames(df) <- df[1, ]
df <- df[-1, ]
df
}
GetData_OpenURL <- function(longURL){
require(RCurl)
urlContent <- getURLContent(longURL, ssl.verifyhost = FALSE, ssl.verifypeer = FALSE)
splitByRow <- unlist(strsplit(urlContent, "\n"))
splitByCol <- unlist(strsplit(splitByRow, "[|]"))
dataMatrix <- matrix(splitByCol, nrow = length(splitByRow), byrow = TRUE)
return(dataMatrix)
}
startDate <- 20160101
endDate <- 20170101
### 获取中证500成份股数据：
indexComp <- GetData_IndexComponent("399905")
### 获取股票行情数据：
stockData <- GetData_StockData(startDate, endDate)
### 确定交易日：
tradingDates <- GetData_TradingDate()
tradingDates <- tradingDates[tradingDates >= startDate & tradingDates <= endDate]
dates <- tradingDates[seq(1, length(tradingDates), by = 20)]
View(estimateStockData)
res_tradelist <- NULL
for(i in 2:length(dates)){ # i = 2
date <- dates[i]
# 获取当日中证500成分股:
ind_comp <- which(indexComp$INDATE < date & indexComp$OUTDATE >= date)
stocks <- unique(indexComp[ind_comp, "SECUCODE"])
# 获取当日股票beta数据:
dailyBeta <- GetData_Beta(date)
tmp <- sapply(stocks, function(e) dailyBeta[dailyBeta$F_CODE == e, "F_BETA"])
ind <- sapply(tmp, length)
beta_df <- data.frame(SECUCODE = stocks[ind > 0], BETA = unlist(tmp))
# 计算股票收益率和协方差矩阵：
secucodes <- beta_df$SECUCODE
tmp <- estimateStockData(secucodes, stockData)
mu_stock <- tmp$mu_stock
COV_stock <- tmp$COV_stock
# 优化权重：
tmp <- optimWeight(
mu_stock,
COV_stock,
beta_df
)
#sum(tmp$WEIGHT * tmp$BETA)
#plot(tmp$WEIGHT, tmp$BETA)
codes <- as.numeric(
colnames(COV_stock)
)
tradelist <- data.frame(
DATE = date,
SECUCODE = codes,
WEIGHT = tmp$WEIGHT
)
# 记录选股列表：
res_tradelist <- rbind(res_tradelist, tradelist)
}
install.packages('kernlab')
res_tradelist <- NULL
for(i in 2:length(dates)){ # i = 2
date <- dates[i]
# 获取当日中证500成分股:
ind_comp <- which(indexComp$INDATE < date & indexComp$OUTDATE >= date)
stocks <- unique(indexComp[ind_comp, "SECUCODE"])
# 获取当日股票beta数据:
dailyBeta <- GetData_Beta(date)
tmp <- sapply(stocks, function(e) dailyBeta[dailyBeta$F_CODE == e, "F_BETA"])
ind <- sapply(tmp, length)
beta_df <- data.frame(SECUCODE = stocks[ind > 0], BETA = unlist(tmp))
# 计算股票收益率和协方差矩阵：
secucodes <- beta_df$SECUCODE
tmp <- estimateStockData(secucodes, stockData)
mu_stock <- tmp$mu_stock
COV_stock <- tmp$COV_stock
# 优化权重：
tmp <- optimWeight(
mu_stock,
COV_stock,
beta_df
)
#sum(tmp$WEIGHT * tmp$BETA)
#plot(tmp$WEIGHT, tmp$BETA)
codes <- as.numeric(
colnames(COV_stock)
)
tradelist <- data.frame(
DATE = date,
SECUCODE = codes,
WEIGHT = tmp$WEIGHT
)
# 记录选股列表：
res_tradelist <- rbind(res_tradelist, tradelist)
}
write.csv(res_tradelist, file = "res_tradelist_ZZ500_opti.csv", row.names = FALSE)
pwd
cwd
cwd()
pwd()
getwd(
)
150/600
sd(22,18.9)
sd(c(22,18.9))
150/600
knitr::opts_chunk$set(echo = TRUE)
df = read.csv('m5 G09 Winning Probabilities.csv', sep = ';')
print(df, row.names = FALSE, digits = 2)
df = read.csv('m5 G09 Winning Probabilities.csv', sep = ';')
print(df, row.names = FALSE, digits = 2)
df = read.csv('m5 G09 Winning Probabilities.csv', sep = ';')
print(df, row.names = FALSE, digits = 2)
df = read.csv('m5 G09 Winning Probabilities.csv', sep = ';')
print(df, row.names = FALSE, digits = 2)
print(df, row.names = FALSE, digits = 2)
choose(3,2)
choose(5,3)
df = read.csv('Chances.csv', sep = ';')
print(df, row.names = FALSE, digits = 2)
df = read.csv('Chances.csv', sep = ',')
print(df, row.names = FALSE, digits = 2)
choose(18,2)
choose(17,2)
choose(20,3)
choose(50, 20)
choose(50, 25)
choose(40, 29)
choose(100, 0)
library(AppliedPredictiveModeling)
install.packages('AppliedPredictiveModeling')
library(AppliedPredictiveModeling)
data("concrete")
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
library(caret)
install.packages("caret")
library(caret)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[inTrain, ]
testing = mixtures[-inTrain,]
library(Hmisc)
help(cut2)
str(mixtures)
ggplot(aes(data=training, x=row.names(training), y=CompressiveStrength))
ggplot(aes(x=row.names(training), y=CompressiveStrength, col=cut2(Cement)), data=training)
plot(mixtures$CompressiveStrength)
plot(mixtures$CompressiveStrength, col=cut2(Cement))
plot(mixtures$CompressiveStrength, col=cut2(mixutres$Cement))
plot(mixtures$CompressiveStrength, col=cut2(mixtures$Cement))
plot(mixtures$CompressiveStrength, col=cut2(mixtures$BlastFurnaceSlag))
plot(mixtures$CompressiveStrength, col=cut2(mixtures$FlyAsh))
plot(mixtures$CompressiveStrength, col=cut2(mixtures$Age))
plot(mixtures$CompressiveStrength, col=cut2(mixtures$FlyAsh))
plot(mixtures$FlyAsh)
plot(mixtures$Age)
plot(mixtures$CompressiveStrength, col=cut2(mixutres$Water))
plot(mixtures$CompressiveStrength, col=cut2(mixtures$Water))
plot(mixtures$CompressiveStrength, col=cut2(mixtures$Superplasticizer))
plot(mixtures$CompressiveStrength, col=cut2(mixtures$CoarseAggregate))
names(mixtures)
names(mixtures)[-1]
names(mixtures)[-9]
par(mfrows=8)
plot(mixtures$CompressiveStrength, col=cut2(mixtures$CoarseAggregate))
function plotCol(colname){}
par(mfrow=8)
par(mfrow=c(8))
par(mfrow=c(1,8))
function(colname){
plot(mixtures$CompressiveStrength, col=cut2(mixtures[colname]))
}
pcoln <- function(colname){
plot(mixtures$CompressiveStrength, col=cut2(mixtures[colname]))
}
pcoln("FlyAsh")
par(mfrow=c(8,1))
pcoln("FlyAsh")
pcoln("FlyAsh")
par(mfrow=c(1,1))
pcoln("FlyAsh")
plot(mixtures$CompressiveStrength, col=cut2(mixtures[,colname]))
pcoln <- function(colname){
plot(mixtures$CompressiveStrength, col=cut2(mixtures[,colname]))
}
pcoln("FlyAsh")
par(mfrow=c(3,1))
sapply(names(mixtures)[1:3], pcoln)
sapply(names(mixtures)[3:6], pcoln)
sapply(names(mixtures)[7:8], pcoln)
par(mfrow = c(1,1))
hist(mixtures$Superplasticizer)
mixtures$Superplasticizer
sum(mixtures$Superplasticizer<0)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
inTrain = createDataPartition(adData$diagnosis, p=3/4)
inTrain = createDataPartition(adData$diagnosis, p=3/4)[[1]]
training = adData[inTrain,]
testing = adData[-inTrain,]
il_cols <- names(training)[lapply(names(training), function(x){substr(x, 1,2)=='IL'})]
il_cols <- names(training)[sapply(names(training), function(x){substr(x, 1,2)=='IL'})]
il_cols
training[,il_cols]
help("preProcess")
res <- preProcess(training[,il_cols], thresh=0.9)
res
il_cols
res <- preProcess(training[,il_cols], thresh=0.5)
res
res <- preProcess(training[,il_cols], method="pca", thresh=0.9)
res
training_il = training[, il_cols]
names(training_il)
cbind(il_cols, 'a')
rbind(il_cols, 'a')
c(il_cols, 'a')
training_il = training[, c(il_cols, 'diagnosis')]
names(training_il)
testing_il = testing[, c(il_cols, 'diagnosis')]
modelFit <- train(diagnosis~., method='glm', data=training_il)
install.packages("e1071")
modelFit <- train(diagnosis~., method='glm', data=training_il)
res_test <- predict(modelFit, newdata = testing_il)
res_test
testing_il$diagnosis
confusionMatrix(testing_il$diagnosis, res_test)
preProc <- preProcess(training_il[, il_cols], method = 'pca', thresh = 0.8)
trainPC <- predict(preProc, training_il[, il_cols])
modelFit_wPC <- train(training_il$diagnosis~., method='glm', data=trainPC)
trainPC
names(trainPC)
modelFit_wPC <- train(training_il$diagnosis~., method='glm', data=trainPC)
dim(trainPC)
dim(training_il)
names(training_il)
modelFit_wPC <- train(training_il$diagnosis ~ ., method='glm', data=trainPC)
testPC <- predict(preProc, testing_il[, il_cols])
modelFit_wPC <- train( training_il$diagnosis ~ ., method='glm', data=trainPC)
cl
clear()
help(train)
modelFit_wPC <- train(training_il$diagnosis ~ ., method="glm", preProcess="pca", data=training_il)
library(caret)
R.Version()
R.version.string
R.version.string
library(caret)
install.packages(caret)
install.packages('caret')
library(caret)
library(AppliedPredictiveModeling)
install.packages('AppliedPredictiveModeling')
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
il_cols = sapply(names(adData), function(x){substr(1,2)=='IL'})
il_cols = names(adData)[sapply(names(adData), function(x){substr(x,1,2)=='IL'})]
il_cols
inTrain = createDataPartition(adData$diagnosis, p=3/4)[[1]]
training = adData[inTrain, c(il_cols, 'diagnosis')]
testing = adData[-inTrain, c(il_cols, 'diagnosis')]
names(training)[-9]
names(training)[,-9]
names(training)[9]
names(training)[14]
names(training)[13]
res <- preProcess(training[,-13], method='pca', thresh = 0.8)
summary(res)
names(res)
res
res <- preProcess(training[,-13], method='pca', thresh = 0.9)
res
model0 <- train(diagnosis ~ ., method='glm', data=training)
install.packages('e1071')
model0 <- train(diagnosis ~ ., method='glm', data=training)
confusionMatrix(testing$diagnosis, predict(model0, testing))
preProc <- preProcess(training[,-13], method='pca', thresh = 0.8)
trainPC <- predict(preProc, training[-13])
model1 <- train(training$diagnosis ~ ., method='glm', data=trainPC)
trainPC
dim(trainPC)
dim(training)
names(trainPC)
c(training$diagnosis, trainPC)
model1 <- train(diagnosis ~ ., method='glm', data=c(training$diagnosis, trainPC))
names(trainPC)
trainPC_d = c(training$diagnosis, trainPC)
names(trainPC_d)
trainPC_d = cbind(training$diagnosis, trainPC)
dim(trainPC_d)
names(trainPC_d)
trainPC_d = cbind(diagnosis=training$diagnosis, trainPC)
names(trainPC_d)
dim(trainPC_d)
model1 <- train(diagnosis ~ ., method='glm', data=trainPC_d)
testPC <- predict(preProc, testing[,-13])
confusionMatrix(testing$diagnosis, predict(model1, testPC))
library(slidify)
setwd("~/Documents/MOOC/dataprod-shiny")
slidify('index.html')
slidify('index.html')
slidify('index.html')
install.packages('webshot')
